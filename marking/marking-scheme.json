{
  "totalMark": 15,
  "wsosSections": {
    "1": "Work organization and self-management",
    "2": "Communication and interpersonal skills",
    "5": "Back-End Development"
  },
  "subCriterions": [
    {
      "name": "Project Setup and Database",
      "aspects": [
        {
          "type": "measurement",
          "description": "Database SQL dump imports successfully",
          "maxMark": 0.5,
          "wsosSection": 1,
          "extraDescription": "SQL dump executes without errors on fresh MySQL database",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Server starts on port 3000 and responds to requests",
          "maxMark": 0.5,
          "wsosSection": 1,
          "extraDescription": "API server starts without errors and accepts HTTP requests",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Authentication System Testing",
      "aspects": [
        {
          "type": "measurement",
          "description": "POST /api/v1/users/register creates new user successfully",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: POST with valid email/name/password returns 201 with user data",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User registration sets creditBalance to 0",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: New user response shows credits: 0",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Duplicate email registration returns 400 error",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: POST with existing email returns 400 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "POST /api/v1/users/login with valid credentials returns token",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: POST with correct email/password returns 200 with token",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Login with invalid credentials returns 401",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: POST with wrong password returns 401 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Protected endpoints require X-API-TOKEN header",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: GET /api/v1/users/me without header returns 401",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid token returns 401 authorization error",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: GET /api/v1/users/me with fake token returns 401",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "POST /api/v1/users/logout revokes current token",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: After logout, using same token returns 401",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "User Profile and Statistics",
      "aspects": [
        {
          "type": "measurement",
          "description": "GET /api/v1/users/me returns user basic information",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Response includes user.id, user.name, user.email, user.creditBalance",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User profile includes statistics object",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Response includes stats.enrolledCourses, stats.completedChapters, stats.totalCreditsEarned, stats.upcomingBookings",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User profile includes recentActivity array",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Response includes recentActivity array with timestamp and type fields",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Course Management Testing",
      "aspects": [
        {
          "type": "measurement",
          "description": "GET /api/v1/courses returns array of courses",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Response is array with course objects containing id, title, description",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course listing includes isEnrolled status",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Each course object includes isEnrolled boolean field",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "GET /api/v1/courses/:id returns single course details",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Valid course ID returns course with chapters array",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid course ID returns 404 error",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: GET /api/v1/courses/99999 returns 404 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "POST /api/v1/courses/:id/enroll creates enrollment",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Valid course ID returns 201, subsequent GET shows isEnrolled: true",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Duplicate enrollment returns 409 conflict",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: Enrolling in same course twice returns 409 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "POST /api/v1/courses/:courseId/chapters/:chapterId/complete awards credits",
          "maxMark": 1,
          "wsosSection": 5,
          "extraDescription": "Test: Chapter completion increases user credit balance and returns updated balance",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Chapter completion without enrollment returns 403",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: Complete chapter without enrollment returns 403 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Mentor Session Testing",
      "aspects": [
        {
          "type": "measurement",
          "description": "GET /api/v1/mentors/sessions returns available sessions",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Response is array with session objects containing id, mentorName, creditCost",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session data includes mentor and booking information",
          "maxMark": 0.5,
          "wsosSection": 5,
          "extraDescription": "Test: Sessions include mentorName, expertise, sessionDate, durationMinutes, creditCost",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "POST /api/v1/mentors/sessions/:id/book creates booking with sufficient credits",
          "maxMark": 1,
          "wsosSection": 5,
          "extraDescription": "Test: Booking with enough credits returns 201 and deducts credits from balance",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking with insufficient credits returns 403",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: Booking expensive session with low credit balance returns 403 with error",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid session ID returns 404 error",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: POST /api/v1/mentors/sessions/99999/book returns 404 with error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Error Handling and Response Format",
      "aspects": [
        {
          "type": "measurement",
          "description": "All endpoints return proper JSON content-type headers",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: Response headers include Content-Type: application/json",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Success responses use correct HTTP status codes",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: GET returns 200, POST creation returns 201",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Error responses include descriptive message field",
          "maxMark": 0.5,
          "wsosSection": 2,
          "extraDescription": "Test: All 4xx/5xx responses contain JSON with message field",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    }
  ]
}