{
  "totalMark": 15,
  "wsosSections": {
    "1": "Work organization and self-management",
    "2": "Communication and interpersonal skills",
    "5": "Back-End Development"
  },
  "subCriterions": [
    {
      "name": "Project Setup and Deliverables",
      "aspects": [
        {
          "type": "measurement",
          "description": "Database SQL dump file exists in db/db-dump.sql",
          "maxMark": 0.125,
          "wsosSection": 1,
          "extraDescription": "SQL dump file is present in the correct location",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Database dump executes without errors",
          "maxMark": 0.125,
          "wsosSection": 1,
          "extraDescription": "SQL dump can be executed on a fresh MySQL instance without syntax errors",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Server application starts and runs",
          "maxMark": 0.25,
          "wsosSection": 1,
          "extraDescription": "REST API server starts without errors and stays running",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "API endpoints respond with JSON format",
          "maxMark": 0.25,
          "wsosSection": 1,
          "extraDescription": "API endpoints return proper JSON responses with correct Content-Type headers",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "API accessible on correct base path /api/v1",
          "maxMark": 0.25,
          "wsosSection": 1,
          "extraDescription": "All endpoints are accessible under the /api/v1 base path",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "API Communication and Error Handling",
      "aspects": [
        {
          "type": "measurement",
          "description": "401 status code returned for missing authentication",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "Missing X-API-TOKEN header returns 401 status code",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Authentication error response includes proper message",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "401 responses include JSON with meaningful error message",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Success endpoints return 200 status code",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "Successful GET requests return 200 status code",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Resource creation returns 201 status code",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "User registration and enrollment return 201 status code",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Not found errors return 404 status code",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "Invalid course IDs and non-existent resources return 404",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Error responses include descriptive messages",
          "maxMark": 0.125,
          "wsosSection": 2,
          "extraDescription": "All error responses contain human-readable message field",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "User Authentication Implementation",
      "aspects": [
        {
          "type": "measurement",
          "description": "Protected endpoints require X-API-TOKEN header",
          "maxMark": 0.75,
          "wsosSection": 5,
          "extraDescription": "All endpoints except register/login check for X-API-TOKEN header",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid tokens are rejected properly",
          "maxMark": 0.75,
          "wsosSection": 5,
          "extraDescription": "Invalid or expired tokens return 401 authorization error",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User registration endpoint accepts requests",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "POST /users/register endpoint exists and accepts JSON requests",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Registration creates new user with 0 credits",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "New users are created with creditBalance set to 0",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Registration validates email uniqueness",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Duplicate email addresses return 400 error",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Registration returns user information on success",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Successful registration returns user object with id, email, name, credits",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User login endpoint validates credentials",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "POST /users/login validates email and password combination",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Login returns authentication token",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Successful login returns valid API token for subsequent requests",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Login returns user information",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Login response includes user object with current credit balance",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid login credentials return 401",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Wrong email/password combinations return 401 unauthorized",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Logout endpoint revokes tokens",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "POST /users/logout invalidates the current API token",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Logout returns success confirmation",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Logout returns 200 status with success message",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "User Profile and Statistics API",
      "aspects": [
        {
          "type": "measurement",
          "description": "User profile endpoint exists and responds",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "GET /users/me endpoint exists and returns valid JSON response",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Profile returns basic user information",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Response includes user id, name, email, and current credit balance",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Profile includes enrollment statistics",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Response includes stats like enrolledCourses and completedChapters counts",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Profile includes credit statistics",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Response includes totalCreditsEarned and upcomingBookings counts",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Recent activity feed is included",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Response includes recentActivity array with user's recent actions",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Activity feed has correct event types",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Activity events include chapter_completed and session_booked types",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Activity events include proper timestamps",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "All activity events have ISO 8601 formatted timestamps",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Credit balance calculation is accurate",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "User credit balance reflects all earnings and expenditures correctly",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Course Management API",
      "aspects": [
        {
          "type": "measurement",
          "description": "Course listing endpoint returns all courses",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "GET /courses returns array of all available courses",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course listing includes enrollment status",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Each course includes isEnrolled field for current user",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course listing includes metadata",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Courses include title, description, difficulty, totalChapters, totalCredits",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course details endpoint returns single course",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "GET /courses/:id returns detailed information for specific course",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course details include chapter information",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Course details include chapters array with completion status",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid course ID returns 404",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Non-existent course IDs return 404 not found error",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Course enrollment creates enrollment record",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "POST /courses/:id/enroll successfully creates enrollment in database",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Duplicate enrollment returns 409 conflict",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Enrolling in already enrolled course returns 409 conflict",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Chapter completion requires enrollment",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Chapter completion fails with 403 if user not enrolled in course",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Chapter completion awards credits",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Completing chapter increases user credit balance by chapter credits",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Chapter completion creates completion record",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Completion creates record in chapter_completions table",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Duplicate completion returns 409 conflict",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Completing already completed chapter returns 409 conflict",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Mentor Session Management API",
      "aspects": [
        {
          "type": "measurement",
          "description": "Mentor sessions listing returns available sessions",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "GET /mentors/sessions returns array of available mentor sessions",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session listing includes mentor information",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Sessions include mentorName, expertise, experienceLevel",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session listing includes session details",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Sessions include sessionDate, durationMinutes, creditCost",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking creates booking record",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "POST /mentors/sessions/:id/book creates session booking in database",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking validates credit balance",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Booking fails with 403 if user has insufficient credits",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking deducts credits",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Successful booking decreases user credit balance by session cost",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking creates transaction record",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Booking creates credit transaction record for audit trail",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Session booking returns booking information",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Successful booking returns booking object with id, status, creditsPaid",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Unavailable sessions return 409 conflict",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Booking unavailable sessions returns 409 conflict error",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Invalid session ID returns 404",
          "maxMark": 0.125,
          "wsosSection": 5,
          "extraDescription": "Non-existent session IDs return 404 not found error",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Input Validation and Security",
      "aspects": [
        {
          "type": "measurement",
          "description": "Request validation prevents SQL injection",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "Uses parameterized queries or ORM to prevent SQL injection attacks",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Required fields validation implemented",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "API validates that required fields are present in requests",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "Password hashing implemented securely",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "User passwords are hashed using bcrypt or similar secure algorithm",
          "calculation": {
            "type": "pass-or-fail"
          }
        },
        {
          "type": "measurement",
          "description": "User input sanitization applied",
          "maxMark": 0.25,
          "wsosSection": 5,
          "extraDescription": "User inputs are sanitized to prevent XSS and injection attacks",
          "calculation": {
            "type": "pass-or-fail"
          }
        }
      ]
    },
    {
      "name": "Code Quality and Project Structure",
      "aspects": [
        {
          "type": "judgement",
          "description": "Framework conventions and file organization",
          "maxMark": 0.5,
          "wsosSection": 5,
          "judgementScoreDescription": [
            "Poor code organization with no framework conventions followed",
            "Basic framework structure but inconsistent naming and organization",
            "Good framework conventions with proper controllers, models, and middleware",
            "Excellent framework implementation with perfect MVC structure and clean architecture"
          ]
        },
        {
          "type": "judgement",
          "description": "Database schema and relationships quality",
          "maxMark": 0.25,
          "wsosSection": 5,
          "judgementScoreDescription": [
            "Poor database design with missing relationships and constraints",
            "Basic schema with some relationships but missing key constraints",
            "Good normalized schema with proper foreign keys and relationships",
            "Excellent database design with optimal normalization and comprehensive constraints"
          ]
        },
        {
          "type": "judgement",
          "description": "API design consistency and standards",
          "maxMark": 0.25,
          "wsosSection": 5,
          "judgementScoreDescription": [
            "Poor API design with inconsistent endpoints and non-RESTful patterns",
            "Basic API structure but inconsistent response formats and methods",
            "Good RESTful design with consistent response formats and HTTP methods",
            "Excellent RESTful API with perfect consistency and standardized patterns"
          ]
        }
      ]
    }
  ]
}